"""Add scenario management models

Revision ID: b2c3d4e5f6a7
Revises: a1b2c3d4e5f6
Create Date: 2025-06-02 22:15:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b2c3d4e5f6a7'
down_revision: Union[str, None] = 'a1b2c3d4e5f6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create scenario table
    op.create_table('scenario',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('category', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column('version', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
        sa.Column('status', sa.Enum('DRAFT', 'TESTING', 'ACTIVE', 'INACTIVE', 'ARCHIVED', name='scenariostatus'), nullable=False),
        sa.Column('is_template', sa.Boolean(), nullable=False),
        sa.Column('scenario_metadata', sa.JSON(), nullable=True),
        sa.Column('created_by', sa.Uuid(), nullable=False),
        sa.Column('updated_by', sa.Uuid(), nullable=True),
        sa.Column('deployed_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
        sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scenario_name'), 'scenario', ['name'], unique=False)
    
    # Create scenario node table
    op.create_table('scenarionode',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('node_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column('node_type', sa.Enum('START', 'MESSAGE', 'BRANCH', 'TRANSFER', 'END', 'INPUT', name='nodetype'), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
        sa.Column('position_x', sa.Float(), nullable=False),
        sa.Column('position_y', sa.Float(), nullable=False),
        sa.Column('config', sa.JSON(), nullable=False),
        sa.Column('scenario_id', sa.Uuid(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['scenario_id'], ['scenario.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scenarionode_node_id'), 'scenarionode', ['node_id'], unique=False)
    
    # Create scenario connection table
    op.create_table('scenarioconnection',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('source_node_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column('target_node_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column('condition', sa.JSON(), nullable=True),
        sa.Column('label', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column('scenario_id', sa.Uuid(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['scenario_id'], ['scenario.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create scenario version table
    op.create_table('scenarioversion',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('version', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
        sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('snapshot', sa.JSON(), nullable=False),
        sa.Column('scenario_id', sa.Uuid(), nullable=False),
        sa.Column('created_by', sa.Uuid(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
        sa.ForeignKeyConstraint(['scenario_id'], ['scenario.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create scenario simulation table
    op.create_table('scenariosimulation',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('start_node_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column('simulation_config', sa.JSON(), nullable=True),
        sa.Column('scenario_id', sa.Uuid(), nullable=False),
        sa.Column('current_node_id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column('session_data', sa.JSON(), nullable=True),
        sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
        sa.Column('started_by', sa.Uuid(), nullable=False),
        sa.Column('started_at', sa.DateTime(), nullable=False),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['scenario_id'], ['scenario.id'], ),
        sa.ForeignKeyConstraint(['started_by'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('scenariosimulation')
    op.drop_table('scenarioversion')
    op.drop_table('scenarioconnection')
    op.drop_index(op.f('ix_scenarionode_node_id'), table_name='scenarionode')
    op.drop_table('scenarionode')
    op.drop_index(op.f('ix_scenario_name'), table_name='scenario')
    op.drop_table('scenario')
    
    # Drop enums
    op.execute('DROP TYPE IF EXISTS nodetype')
    op.execute('DROP TYPE IF EXISTS scenariostatus')
    # ### end Alembic commands ###
