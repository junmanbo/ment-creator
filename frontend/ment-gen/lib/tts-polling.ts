// frontend/ment-gen/lib/tts-polling.ts
/**\n * TTS \uc0dd\uc131 \uc0c1\ud0dc \ud6a8\uc728\uc801 \ud3f4\ub9c1 \uc720\ud2f8\ub9ac\ud2f0\n */\n\nexport interface TTSGeneration {\n  id: string\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled'\n  error_message?: string\n  quality_score?: number\n  started_at?: string\n  completed_at?: string\n}\n\nexport class TTSPollingManager {\n  private intervals: Map<string, NodeJS.Timeout> = new Map()\n  private callbacks: Map<string, (generation: TTSGeneration) => void> = new Map()\n  \n  constructor(private apiBaseUrl: string, private getAuthToken: () => string | null) {}\n  \n  /**\n   * TTS \uc0dd\uc131 \uc0c1\ud0dc \ud3f4\ub9c1 \uc2dc\uc791\n   */\n  startPolling(\n    generationId: string, \n    callback: (generation: TTSGeneration) => void,\n    maxAttempts: number = 60 // 3\ubd84 (3\ucd08 \uac04\uaca9)\n  ) {\n    // \uae30\uc874 \ud3f4\ub9c1 \uc885\ub8cc\n    this.stopPolling(generationId)\n    \n    let attempts = 0\n    this.callbacks.set(generationId, callback)\n    \n    const poll = async () => {\n      attempts++\n      \n      try {\n        const token = this.getAuthToken()\n        if (!token) {\n          this.stopPolling(generationId)\n          return\n        }\n        \n        const response = await fetch(\n          `${this.apiBaseUrl}/voice-actors/tts-generations/${generationId}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        )\n        \n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}`)\n        }\n        \n        const generation: TTSGeneration = await response.json()\n        callback(generation)\n        \n        // \uc644\ub8cc\ub418\uac70\ub098 \uc2e4\ud328\ud55c \uacbd\uc6b0 \ud3f4\ub9c1 \uc911\ub2e8\n        if (['completed', 'failed', 'cancelled'].includes(generation.status)) {\n          this.stopPolling(generationId)\n          return\n        }\n        \n        // \ucd5c\ub300 \uc2dc\ub3c4 \ud69f\uc218 \ucd08\uacfc \uc2dc \uc911\ub2e8\n        if (attempts >= maxAttempts) {\n          this.stopPolling(generationId)\n          return\n        }\n        \n        // \ub2e4\uc74c \ud3f4\ub9c1 \uc608\uc57d\n        const interval = setTimeout(poll, this.getPollingInterval(attempts))\n        this.intervals.set(generationId, interval)\n        \n      } catch (error) {\n        console.error(`TTS polling error for ${generationId}:`, error)\n        \n        // \ub124\ud2b8\uc6cc\ud06c \uc624\ub958 \uc2dc \uc7ac\uc2dc\ub3c4 (\ucd5c\ub300 \ud69f\uc218 \ub0b4\uc5d0\uc11c)\n        if (attempts < maxAttempts) {\n          const interval = setTimeout(poll, this.getPollingInterval(attempts, true))\n          this.intervals.set(generationId, interval)\n        } else {\n          this.stopPolling(generationId)\n        }\n      }\n    }\n    \n    // \uc989\uc2dc \uccab \ubc88\uc9f8 \ud3f4\ub9c1 \uc2e4\ud589\n    poll()\n  }\n  \n  /**\n   * \ud2b9\uc815 TTS \uc0dd\uc131 \ud3f4\ub9c1 \uc911\ub2e8\n   */\n  stopPolling(generationId: string) {\n    const interval = this.intervals.get(generationId)\n    if (interval) {\n      clearTimeout(interval)\n      this.intervals.delete(generationId)\n    }\n    this.callbacks.delete(generationId)\n  }\n  \n  /**\n   * \ubaa8\ub4e0 \ud3f4\ub9c1 \uc911\ub2e8\n   */\n  stopAllPolling() {\n    for (const [generationId] of this.intervals) {\n      this.stopPolling(generationId)\n    }\n  }\n  \n  /**\n   * \uc5ec\ub7ec TTS \uc0dd\uc131\uc744 \ubc30\uce58\ub85c \ud3f4\ub9c1\n   */\n  startBatchPolling(\n    generationIds: string[],\n    callback: (generations: TTSGeneration[], summary: any) => void,\n    maxAttempts: number = 60\n  ) {\n    const batchId = `batch_${Date.now()}`\n    let attempts = 0\n    \n    const poll = async () => {\n      attempts++\n      \n      try {\n        const token = this.getAuthToken()\n        if (!token) return\n        \n        const response = await fetch(\n          `${this.apiBaseUrl}/voice-actors/tts-generations/batch-status?generation_ids=${generationIds.join(',')}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        )\n        \n        if (!response.ok) throw new Error(`HTTP ${response.status}`)\n        \n        const data = await response.json()\n        callback(data.generations, data.summary)\n        \n        // \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc644\ub8cc\ub41c \uacbd\uc6b0 \uc911\ub2e8\n        const activeCount = data.summary.pending + data.summary.processing\n        if (activeCount === 0 || attempts >= maxAttempts) {\n          this.stopPolling(batchId)\n          return\n        }\n        \n        // \ub2e4\uc74c \ud3f4\ub9c1 \uc608\uc57d\n        const interval = setTimeout(poll, this.getPollingInterval(attempts))\n        this.intervals.set(batchId, interval)\n        \n      } catch (error) {\n        console.error('Batch TTS polling error:', error)\n        if (attempts < maxAttempts) {\n          const interval = setTimeout(poll, this.getPollingInterval(attempts, true))\n          this.intervals.set(batchId, interval)\n        } else {\n          this.stopPolling(batchId)\n        }\n      }\n    }\n    \n    poll()\n    return batchId\n  }\n  \n  /**\n   * \uc0c1\ud669\uc5d0 \ub530\ub978 \ud3f4\ub9c1 \uac04\uaca9 \uacc4\uc0b0\n   */\n  private getPollingInterval(attempts: number, isError: boolean = false): number {\n    if (isError) {\n      // \uc624\ub958 \uc2dc \ub354 \uae34 \uac04\uaca9\n      return Math.min(10000, 2000 * attempts) // 2\ucd08\uc5d0\uc11c \uc2dc\uc791\ud574 \ucd5c\ub300 10\ucd08\n    }\n    \n    // \uc815\uc0c1 \ud3f4\ub9c1: \ucc98\uc74c\uc5d0\ub294 \ube60\ub974\uac8c, \ub098\uc911\uc5d0\ub294 \uc11c\uc11c\ud788\n    if (attempts <= 5) return 2000   // \ucc98\uc74c 5\ubc88\uc740 2\ucd08 \uac04\uaca9\n    if (attempts <= 15) return 3000  // \ub2e4\uc74c 10\ubc88\uc740 3\ucd08 \uac04\uaca9\n    return 5000                      // \uadf8 \uc774\ud6c4\ub294 5\ucd08 \uac04\uaca9\n  }\n  \n  /**\n   * \ud604\uc7ac \ud3f4\ub9c1 \uc911\uc778 \uc791\uc5c5 \uc218\n   */\n  getActivePollingCount(): number {\n    return this.intervals.size\n  }\n  \n  /**\n   * \ud3f4\ub9c1 \uc911\uc778 \uc791\uc5c5 \ubaa9\ub85d\n   */\n  getActivePollingIds(): string[] {\n    return Array.from(this.intervals.keys())\n  }\n}\n\n// \uc804\uc5ed \uc778\uc2a4\ud134\uc2a4 (\ud544\uc694\uc2dc \uc0ac\uc6a9)\nexport const createTTSPollingManager = (apiBaseUrl: string, getAuthToken: () => string | null) => {\n  return new TTSPollingManager(apiBaseUrl, getAuthToken)\n}\n